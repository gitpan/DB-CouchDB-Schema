.\" Automatically generated by Pod::Man 2.12 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DB::CouchDB 3"
.TH DB::CouchDB 3 "2008-12-25" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\&    DB::CouchDB \- A low level perl module for CouchDB
.Ve
.SH "VERSION"
.IX Header "VERSION"
0.2
.SH "RATIONALE"
.IX Header "RATIONALE"
After working with a lot several of the CouchDB modules already in \s-1CPAN\s0 I found
myself dissatisfied with them. Since the \s-1API\s0 for Couch is so easy I wrote my own
which I find to have an \s-1API\s0 that better fits a CouchDB Workflow.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    my $db = DB::CouchDB\->new(host => $host,
\&                              db   => $dbname);
\&    my $doc = $db\->get_doc($docname);
\&    my $docid = $doc\->{_id};
\&
\&    my $doc_iterator = $db\->view('foo/bar', \e%view_query_opts);
\&
\&    while ( my $result = $doc_iterator\->next() ) {
\&        ... #do whatever with the result the view returns
\&    }
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Sh "new(%dbopts)"
.IX Subsection "new(%dbopts)"
This is the constructor for the DB::CouchDB object. It expects
a list of name value pairs for the options to the CouchDB database.
.IP "\(bu" 4
Required options: (host => \f(CW$hostname\fR, db => \f(CW$database_name\fR);
.IP "\(bu" 4
Optional options: (port => \f(CW$db_port\fR)
.Sh "Accessors"
.IX Subsection "Accessors"
.IP "\(bu" 4
host \- host name of db
.IP "\(bu" 4
db \- database name
.IP "\(bu" 4
port \- port number of the database server
.IP "\(bu" 4
json \- the \s-1JSON\s0 object for serialization
.Sh "handle_blessed"
.IX Subsection "handle_blessed"
Turns on or off the \s-1JSON\s0's handling of blessed objects.
.PP
.Vb 2
\&    $db\->handle_blessed(1) #turn on blessed object handling
\&    $db\->handle_blessed() #turn off blessed object handling
.Ve
.Sh "all_dbs"
.IX Subsection "all_dbs"
.Vb 1
\&    my $dbs = $db\->all_dbs() #returns an arrayref of databases on this server
.Ve
.Sh "all_docs"
.IX Subsection "all_docs"
.Vb 2
\&    my $dbs = $db\->all_dbs() #returns a DB::CouchDB::Iterator of
\&                             #all documents in this database
.Ve
.Sh "db_info"
.IX Subsection "db_info"
.Vb 1
\&    my $dbinfo = $db\->db_info() #returns a DB::CouchDB::Result with the db info
.Ve
.Sh "create_db"
.IX Subsection "create_db"
Creates the database in the CouchDB server.
.PP
.Vb 1
\&    my $result = $db\->create_db() #returns a DB::CouchDB::Result object
.Ve
.Sh "delete_db"
.IX Subsection "delete_db"
deletes the database in the CouchDB server
.PP
.Vb 1
\&    my $result = $db\->delete_db() #returns a DB::CouchDB::Result object
.Ve
.Sh "create_doc"
.IX Subsection "create_doc"
creates a doc in the database. The document will have an automatically assigned
id/name.
.PP
.Vb 1
\&    my $result = $db\->create_doc($doc) #returns a DB::CouchDB::Result object
.Ve
.Sh "temp_view"
.IX Subsection "temp_view"
runs a temporary view.
.PP
.Vb 1
\&    my $results = $db\->temp_view($view_object);
.Ve
.Sh "create_named_doc"
.IX Subsection "create_named_doc"
creates a doc in the database, the document will have the id/name you specified
.PP
.Vb 1
\&    my $result = $db\->create_named_doc($doc, $docname) #returns a DB::CouchDB::Result object
.Ve
.Sh "update_doc"
.IX Subsection "update_doc"
Updates a doc in the database.
.PP
.Vb 1
\&    my $result = $db\->update_doc($docname, $doc) #returns a DB::CouchDB::Result object
.Ve
.Sh "delete_doc"
.IX Subsection "delete_doc"
Deletes a doc in the database. you must supply a rev parameter to represent the
revision of the doc you are updating. If the revision is not the current revision 
of the doc the update will fail.
.PP
.Vb 1
\&    my $result = $db\->delete_doc($docname, $rev) #returns a DB::CouchDB::Result object
.Ve
.Sh "get_doc"
.IX Subsection "get_doc"
Gets a doc in the database.
.PP
.Vb 1
\&    my $result = $db\->get_doc($docname) #returns a DB::CouchDB::Result object
.Ve
.Sh "view"
.IX Subsection "view"
Returns a views results from the database.
.PP
.Vb 1
\&    my $rs = $db\->view($viewname, \e%view_args) #returns a DB::CouchDB::Iter object
.Ve
.PP
\fIA note about view args:\fR
.IX Subsection "A note about view args:"
.PP
the view args allow you to constrain and/or window the results that the 
view gives back. Some of the ones you will probably want to use are:
.PP
.Vb 2
\&    group => "true"      #turn on the reduce portion of your view
\&    key   => '"keyname"' # only gives back results with a certain key
\&    
\&    #only return results starting at startkey and goint up to endkey
\&    startkey => '"startkey"',
\&    endkey   => '"endkey"'
\&
\&    count => $num  #only returns $num rows
\&    offset => $num #return starting from $num row
.Ve
.PP
All the values should be valid json encoded.
See http://wiki.apache.org/couchdb/HttpViewApi for more information on the view
parameters
.SH "AUTHOR"
.IX Header "AUTHOR"
Jeremy Wall <jeremy@marzhillstudios.com>
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.IP "\(bu" 4
LWP::UserAgent
.IP "\(bu" 4
\&\s-1URI\s0
.IP "\(bu" 4
\&\s-1JSON\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
DB::CouchDB::Result \- \s-1POD\s0 for the DB::CouchDB::Result object
.IP "\(bu" 4
DB::CouchDB::Iter \- \s-1POD\s0 for the DB::CouchDB::Iter object
.IP "\(bu" 4
DB::CouchDB::Schema \- higher level wrapper with some schema handling functionality
